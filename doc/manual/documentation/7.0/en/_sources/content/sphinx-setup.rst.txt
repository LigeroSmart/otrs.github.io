Sphinx Setup
============

Sphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and licensed under the BSD license. For more information see the `Sphinx website <http://www.sphinx-doc.org/>`_ and its `documentation <http://www.sphinx-doc.org/en/master/contents.html>`_.


Install
-------

Sphinx can be installed via package manager on Debian/Ubuntu.

.. code:: bash

   sudo apt-get install python3-sphinx

To generate locale specific PO file, this package is also required:

.. code:: bash

   sudo apt-get install sphinx-intl

Some other packages is required for generating (localized) PDF output:

.. code:: bash

   sudo apt-get install latexmk texlive-latex-extra texlive-lang-european texlive-lang-german


Quick Start
-----------

To quick start, simply go to the documentation root folder, and execute the following command:

.. code:: bash

   sphinx-quickstart

This will ask the following questions. Read them and answer them to your needs. The following output is for OTRSHideShowDynamicFields:

::

   Welcome to the Sphinx 1.6.7 quickstart utility.

   Please enter values for the following settings (just press Enter to
   accept a default value, if one is given in brackets).

   Enter the root path for documentation.
   > Root path for the documentation [.]: 

   You have two options for placing the build directory for Sphinx output.
   Either, you use a directory "_build" within the root path, or you separate
   "source" and "build" directories within the root path.
   > Separate source and build directories (y/n) [n]: 

   Inside the root directory, two more directories will be created; "_templates"
   for custom HTML templates and "_static" for custom stylesheets and other static
   files. You can enter another prefix (such as ".") to replace the underscore.
   > Name prefix for templates and static dir [_]: 

   The project name will occur in several places in the built documentation.
   > Project name: OTRSHideShowDynamicFields
   > Author name(s): OTRS AG

   Sphinx has the notion of a "version" and a "release" for the
   software. Each version can have multiple releases. For example, for
   Python the version is something like 2.5 or 3.0, while the release is
   something like 2.5.1 or 3.0a1.  If you don't need this dual structure,
   just set both to the same value.
   > Project version []: 6.0.0
   > Project release [6.0.0]: 6.0.1

   If the documents are to be written in a language other than English,
   you can select a language here by its language code. Sphinx will then
   translate text that it generates into that language.

   For a list of supported codes, see
   http://sphinx-doc.org/config.html#confval-language.
   > Project language [en]: 

   The file name suffix for source files. Commonly, this is either ".txt"
   or ".rst".  Only files with this suffix are considered documents.
   > Source file suffix [.rst]: 

   One document is special in that it is considered the top node of the
   "contents tree", that is, it is the root of the hierarchical structure
   of the documents. Normally, this is "index", but if your "index"
   document is a custom template, you can also set this to another filename.
   > Name of your master document (without suffix) [index]: 

   Sphinx can also add configuration for epub output:
   > Do you want to use the epub builder (y/n) [n]: 

   Please indicate if you want to use one of the following Sphinx extensions:
   > autodoc: automatically insert docstrings from modules (y/n) [n]: 
   > doctest: automatically test code snippets in doctest blocks (y/n) [n]: 
   > intersphinx: link between Sphinx documentation of different projects (y/n) [n]: 
   > todo: write "todo" entries that can be shown or hidden on build (y/n) [n]: 
   > coverage: checks for documentation coverage (y/n) [n]: 
   > imgmath: include math, rendered as PNG or SVG images (y/n) [n]: 
   > mathjax: include math, rendered in the browser by MathJax (y/n) [n]: 
   > ifconfig: conditional inclusion of content based on config values (y/n) [n]: 
   > viewcode: include links to the source code of documented Python objects (y/n) [n]: 
   > githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]: 

   A Makefile and a Windows command file can be generated for you so that you
   only have to run e.g. "make html" instead of invoking sphinx-build
   directly.
   > Create Makefile? (y/n) [y]: 
   > Create Windows command file? (y/n) [y]:

   Creating file ./conf.py.
   Creating file ./index.rst.
   Creating file ./Makefile.
   Creating file ./make.bat.

   Finished: An initial directory structure has been created.

   You should now populate your master file ./index.rst and create other documentation
   source files. Use the Makefile to build the docs, like so:

      make builder

   where "builder" is one of the supported builders, e.g. html, latex or linkcheck.

The following file structure have been generated:

::

   .
   ├── _build
   ├── _static
   ├── _templates
   ├── conf.py
   ├── index.rst
   ├── make.bat
   └── Makefile

   3 directories, 4 files

The ``_build`` directory is for the various generated outputs, like HTML, LaTeX (PDF) or gettext (POT). The content of the directory is autogenerated, so don't modify the files manually.

The ``_static`` directory is for the static files required by the outputs, like custom CSS or JS files or images.

The ``_templates`` directory is for document templates.

Some other folders need to create for the content and the internationalization. I suggest the following file structure:

:: 

   .
   ├── _build
   ├── content
   │   └── screenshots
   ├── locale
   ├── _static
   ├── _templates
   ├── conf.py
   ├── index.rst
   ├── make.bat
   └── Makefile

The content of the documentation can be placed to the ``content`` directory. These are .rst files, that contain the texts. The screenshots for the content can be placed the ``screenshots`` directory inside the ``content`` directory.

The ``locale`` directory will store the translations of the documentation.


Configuration
-------------

The configuration options can be found in the ``conf.py`` file in the documentation root directory. Please check the documentation form more information about the `configuration options <http://www.sphinx-doc.org/en/master/usage/configuration.html>`_.

Install Theme
~~~~~~~~~~~~~

However there are many themes included with Sphinx, these themes are not mobile friendly. I suggest to install the theme ``sphinx_rtd_theme``. This is the same theme, as used by `Read the Docs <https://readthedocs.org/>`_.

.. note::

   Many themes are available on the `Sphinx Themes <https://sphinx-themes.org/>`_ website.

To install a theme, follow these instructions:

1. Download the theme as .tar.gz
2. Create a ``sphinx-themes`` directory, if necessary
3. Extract the theme to this directory
4. Add the path of the ``sphinx-themes`` directory to the ``conf.py`` in the ``html_theme_path`` setting
5. Specify the name of the theme in the ``conf.py`` with the ``html_theme`` setting

Example configuration:

::

   html_logo = '_static/images/otrs-logo.png'
   html_theme_path = ['/ws/sphinx-themes']
   html_theme = 'sphinx_rtd_theme'

It is recommended to place the ``sphinx-themes`` directory to a shared folder to be accessible from all documentation.

.. note::

   The theme ``sphinx_rtd_theme`` can be installed with the following command:

   .. code:: bash

      pip install sphinx_rtd_theme


Adding Content
--------------

Create some content (.rst files and screenshots) and put them to the appropriate directories. The `reStructuredText syntax <http://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_ can be found on the Sphinx website. Sphinx can also handle the contents if they are split into separate files. Once the content have been written, add the links (without the .rst extension) to the ``index.rst`` file in the document root directory. The content of the ``index.rst`` can be the following:

::

   ==========================
   OTRS Package Documentation
   ==========================

   This documentation is the user manual for OTRSDummyPackage package.

   This work is copyrighted by OTRS AG, Zimmersmühlenweg 11, 61440 Oberursel, Germany.

   Version 6.0.13

   Build Date: 2018-06-11


   .. toctree::
      :maxdepth: 3
      :caption: Contents:

      content/preface
      content/some-other-chapter
      content/one-more-chapter

If the content is ready, you can generate some outputs. First you have to generate the gettext (POT) file for the translations. To do this, execute the following command in the documentation root directory:

.. code:: bash

   sphinx-build -b gettext . _build/gettext

This will generate the a ``gettext`` directory into the ``_build``, and create two POT files: the ``index.pot`` contains the texts from the ``index.rst`` and the ``content.pot`` contains the texts from all .rst files located in ``content`` directory.

.. note::

   If you prefer make file for generating contents, you can also use the following command to generate the gettext (POT) files:

   .. code:: bash

      make gettext

The directory structure is now the following:

:: 

   .
   ├── _build
   │   └── gettext
   │       ├── content.pot
   │       └── index.pot
   ├── content
   │   ├── screenshots
   │   ├── one-more-chapter.rst
   │   ├── preface.rst
   │   └── some-other-chapter.rst
   ├── locale
   ├── _static
   ├── _templates
   ├── conf.py
   ├── index.rst
   ├── make.bat
   └── Makefile

Now create the locale. First you have to add some options to ``conf.py``:

::

   # Options for localization
   locale_dirs = ['locale/']
   gettext_compact = True

If locale don't exist yet, it will be created, otherwise it will be updated. Execute the following command for each language:

.. code:: bash

   sphinx-intl update -p _build/gettext -l de

You have to specify the language with option ``-l``. It is possible to specify more languages at the same time by repeating the option ``-l`` (i. e. ``-l de -l hu``).

After generating ``de`` and ``hu`` locale, the directory structure is the following:

:: 

   .
   ├── _build
   │   └── gettext
   │       ├── content.pot
   │       └── index.pot
   ├── content
   │   ├── screenshots
   │   ├── one-more-chapter.rst
   │   ├── preface.rst
   │   └── some-other-chapter.rst
   ├── locale
   │   ├── de
   │   │   └── LC_MESSAGES
   │   │       ├── content.po
   │   │       └── index.po
   │   └── hu
   │       └── LC_MESSAGES
   │           ├── content.po
   │           └── index.po
   ├── _static
   ├── _templates
   ├── conf.py
   ├── index.rst
   ├── make.bat
   └── Makefile

Now the translators can start translating the documentation into other languages. If the translation is done, you can generate the translated outputs.

For the German HTML output, execute the following command in the documentation root directory:

.. code:: bash

   sphinx-build -b html -D language=de . _build/html/de

You can not generate PDF output directly. First you have to generate LaTeX output, then the PDF from the LaTeX source. Sphinx will create a makefile for this. For the German PDF output, execute the following commands:

.. code:: bash

   sphinx-build -b latex -D language=de . _build/latex/de
   cd _build/latex/de
   make

It is possible to generate EPUB format using the ``-b epub`` option with the same way.

.. note::

   It is also possible to generate the output with the make command, but in this case you can not specify the language. To do this, execute the following commands:

   .. code:: bash

      make html
      make latexpdf


Troubleshooting
---------------

The following issues encountered during the using of Sphinx.


Missing Locale Setting
~~~~~~~~~~~~~~~~~~~~~~

Symptom:

::

   perl: warning: Please check that your locale settings:
      LANGUAGE = (unset),
      LC_ALL = (unset),
      LANG = "en"
   are supported and installed on your system.

Solution: execute the following commands in the terminal:

.. code:: bash

   export LANGUAGE=hu_HU.UTF-8
   export LC_ALL=hu_HU.UTF-8


Pandoc
------

Pandoc is an other useful tool to convert or generate documentation. To convert the existing docbook to reStructuredText, execute the following command:

.. code:: bash

   pandoc doc/en/PACKAGE_NAME.xml --columns 78 -f docbook -t rst -o PACKAGE_NAME.rst


Required Packages on Ubuntu 18.04
---------------------------------

.. code:: bash

   sudo apt-get install python3-sphinx sphinx-intl latexmk texlive-latex-extra texlive-lang-european texlive-lang-german make

